From 770bb20b38a707c651f74f6a2680917820a901b5 Mon Sep 17 00:00:00 2001
From: Aleksei Greshilov <aleksei.greshilov@cern.ch>
Date: Tue, 27 Aug 2024 16:21:39 -0400
Subject: [PATCH] Xilinx XVC driver fixes for X2O

---
 drivers/x2o/xilinx-xvc-driver/xvc_driver.c    |  3 ++-
 .../x2o/xilinx-xvc-driver/xvc_driver_base.c   | 27 ++++++++++++-------
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/drivers/x2o/xilinx-xvc-driver/xvc_driver.c b/drivers/x2o/xilinx-xvc-driver/xvc_driver.c
index 8bfb866dd66b..71217f017691 100644
--- a/drivers/x2o/xilinx-xvc-driver/xvc_driver.c
+++ b/drivers/x2o/xilinx-xvc-driver/xvc_driver.c
@@ -67,7 +67,8 @@ static int xil_xvc_shift_bits(unsigned char* db_ptr, u32 tms_bits, u32 tdi_bits,
 		count--;
 	}
 	if (count == 0)	{
-		printk(KERN_ERR LOG_PREFIX "XVC transaction timed out (%0X)\n", control_reg_data);
+		//printk(KERN_ERR LOG_PREFIX "XVC transaction timed out (%0X)\n", control_reg_data);
+		printk(KERN_ERR "XVC transaction timed out (%0X)\n", control_reg_data);
 		return -ETIMEDOUT;
 	}
 
diff --git a/drivers/x2o/xilinx-xvc-driver/xvc_driver_base.c b/drivers/x2o/xilinx-xvc-driver/xvc_driver_base.c
index c057cdd5c5b8..3b3aca996e15 100644
--- a/drivers/x2o/xilinx-xvc-driver/xvc_driver_base.c
+++ b/drivers/x2o/xilinx-xvc-driver/xvc_driver_base.c
@@ -50,7 +50,8 @@ static struct resource *db_res = NULL;
 static void __iomem * db_ptrs[CONFIG_COUNT];
 
 static void xil_xvc_cleanup(void) {
-	printk(KERN_INFO LOG_PREFIX "Cleaning up resources...\n");
+	//printk(KERN_INFO LOG_PREFIX "Cleaning up resources...\n");
+	printk(KERN_INFO "Cleaning up resources...\n");
 
 	if (!IS_ERR(xvc_dev_class)) {
 		class_destroy(xvc_dev_class);
@@ -153,12 +154,14 @@ int probe(struct platform_device* pdev) {
 
 			xvc_ioc_device = device_create(xvc_dev_class, NULL, ioc_device_number, NULL, ioc_device_name);
 			if (IS_ERR(xvc_ioc_device)) {
-				printk(KERN_WARNING LOG_PREFIX "Failed to create device %s", ioc_device_name);
+				//printk(KERN_WARNING LOG_PREFIX "Failed to create device %s", ioc_device_name);
+				printk(KERN_WARNING "Failed to create device %s", ioc_device_name);
 				xil_xvc_cleanup();
 				dev_err(&pdev->dev, "unable to create the device\n");
 				return status;
 			} else {
-				printk(KERN_INFO LOG_PREFIX "Created device %s", ioc_device_name);
+				//printk(KERN_INFO LOG_PREFIX "Created device %s", ioc_device_name);
+				printk(KERN_INFO "Created device %s", ioc_device_name);
 			}
 
 #ifndef GET_DB_BY_RES
@@ -174,10 +177,12 @@ int probe(struct platform_device* pdev) {
 			db_ptrs[i] = devm_ioremap_resource(&pdev->dev, db_res);
 #endif
 			if (!db_ptrs[i] || IS_ERR(db_ptrs[i])) {
-				printk(KERN_ERR LOG_PREFIX "Failed to remap debug bridge memory at offset 0x%lX, size %lu", db_addr, db_size);
+				//printk(KERN_ERR LOG_PREFIX "Failed to remap debug bridge memory at offset 0x%lX, size %lu", db_addr, db_size);
+				printk(KERN_ERR "Failed to remap debug bridge memory at offset 0x%lX, size %lu", db_addr, db_size);
 				return -ENOMEM;
 			} else {
-				printk(KERN_INFO LOG_PREFIX "Mapped debug bridge at offset 0x%lX, size 0x%lX", db_addr, db_size);
+				//printk(KERN_INFO LOG_PREFIX "Mapped debug bridge at offset 0x%lX, size 0x%lX", db_addr, db_size);
+				printk(KERN_INFO "Mapped debug bridge at offset 0x%lX, size 0x%lX", db_addr, db_size);
 			}
 		}
 	}
@@ -203,7 +208,8 @@ static int remove(struct platform_device* pdev) {
 				}
 #endif
 
-				printk(KERN_INFO LOG_PREFIX "Unmapping debug bridge at offset 0x%lX, size %lu", db_addr, db_size);
+				//printk(KERN_INFO LOG_PREFIX "Unmapping debug bridge at offset 0x%lX, size %lu", db_addr, db_size);
+				printk(KERN_INFO "Unmapping debug bridge at offset 0x%lX, size %lu", db_addr, db_size);
 #ifndef GET_DB_BY_RES
 				iounmap(db_ptrs[i]);
 #else
@@ -213,7 +219,8 @@ static int remove(struct platform_device* pdev) {
 
 				ioc_device_number = MKDEV(MAJOR(xvc_ioc_dev_region), MINOR(xvc_ioc_dev_region) + i);
 				device_destroy(xvc_dev_class, ioc_device_number);
-				printk(KERN_INFO LOG_PREFIX "Destroyed device number %u (user config %i)", ioc_device_number, i);
+				//printk(KERN_INFO LOG_PREFIX "Destroyed device number %u (user config %i)", ioc_device_number, i);
+				printk(KERN_INFO "Destroyed device number %u (user config %i)", ioc_device_number, i);
 			}
 		}
 	}
@@ -245,13 +252,15 @@ static struct platform_driver xil_xvc_plat_driver = {
 static int __init xil_xvc_init(void) {
 	int err = 0;
 
-	printk(KERN_INFO LOG_PREFIX "Starting...\n");
+	//printk(KERN_INFO LOG_PREFIX "Starting...\n");
+	printk(KERN_INFO "Starting...\n");
 
 	// Register the character packet device major and minor numbers
 	err = alloc_chrdev_region(&xvc_ioc_dev_region, 0, CONFIG_COUNT, XVC_DRIVER_NAME);
 	if (err != 0) {
 		xil_xvc_cleanup();
-		printk(KERN_ERR LOG_PREFIX "unable to get char device region\n");
+		//printk(KERN_ERR LOG_PREFIX "unable to get char device region\n");
+		printk(KERN_ERR "unable to get char device region\n");
 		return err;
 	}
 
